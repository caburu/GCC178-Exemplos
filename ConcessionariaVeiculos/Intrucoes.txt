
================ OBSERVAÇÕES GERAIS ====================================

Essa é a sequência de atividades para a aula prática de "Padrões de Projeto - Parte 1"

Você vai precisar desse projeto e dos slides "Parte 15 - Padrões de Projeto - Parte 1"

================ ATIVIDADES ============================================

Exercício 1: 

Execute o programa ConcessionariaVeiculos e teste todas as opções.

Estude o projeto e veja que ele possui uma classe base Carro e classes específicas 
para cada modelo de carro. Ele também possui uma classe Concessionaria que permite
que o usuário compre um carro.

Em seguida, mude a marca da franquia da Concessionaria (alterando a chamada do 
construtor) e teste o programa novamente.

Exercício 2:

No exercício anterior vimos que a classe Concessionaria não tem os carros de 
todas as categorias para a Marca VW.

Faça as alteraçeõs necessárias para que a Concessionaria consiga entregar modelos
de Saveiro (Pickup da VW). Por enquanto não trate os carros de luxo.

O que você achou das mudanças no código?

O que aconteceria se o carro popular da VW passasse a ser o UP! Que partes do código
precisariam ser alteradas?

O que aconteceria se quiséssemos agora comprar carros da Chevrolet? Que partes do
código precisariam ser alteradas?

Exercício 3:

Veja que no exercício anterior nós acabamos mudando o código da classe Concessionária
para produzir carros diferentes. Isso está acontecendo porque nossa classe está
dependendo de classes concretas (ou seja, depende da criação de objetos de tipos
específicos).

O ideal é que nossas classes sejam abertas para extensão e fechadas para modificação.
Se nós quiséssemos tratar uma nova Marca (Chevrolet, por exemplo) teríamos que fazer
ainda mais modificações na classe Concessionária.

Na aula teórica vimos que o Padrão de Projeto Abstract Factory é muito útil nessas
situações. Com ele nós poderemos criar carros de tipos diferentes (inclusive de
marcas diferentes) sem precisarmos ficar alterando o código da Classe Concessionária
a cada novo modelo de Carro.

Faça então a modelagem UML das alterações necessárias para implementar o Abstract
Factory. Considere duas fábricas concretas: VW e Fiat.

Obs1: você pode fazer a modelagem no caderno ou usar o software DIA.

Exercício 4:

Faça a implementação de acordo com a modelagem do exercício anterior. Crie as 
classes necessárias para tratar as marcas VW e Fiat. Teste suas alterações.

O que aconteceria agora se o carro popular da VW passasse a ser o UP! A classe 
Concessionaria precisaria ser alterada?

O que aconteceria agora se quiséssemos agora comprar carros da Chevrolet? Que 
partes do código precisariam ser alteradas?

Exercício 5:

Faça agora as alterações necessárias para que nossa Concessionaria possa vender 
carros da Chevrolet.

Quais mudanças foram necessárias na classe Concessionaria?

Exercício 6:

Veja que com a utilização do Padrão Abstract Factory nós ganhamos a possibilidade
de até mudarmos a marca da franquia em tempo de execução caso necessário.

Crie na classe concessionaria a opção de mudar a marca da franquia e faça os
tratamentos necessários.

Adicione uma opção de menu "Mudar Franquia" que permite ao usuário mudar a 
franquia da concessionária.Teste seu programa comprando carros de uma franquia.
Mude a franquia e compre novos carros.

O que achou das alterações?

Pense nas possibilidades que isso traz em um jogo, por exemplo. Imagine que no
jogo o personagem principal pode usar diferentes tipos de armas. E o ideal é que
a classe do personagem não precise ser alterada para cada tipo de arma que surja.
Como o Abstract Factory pode ajudar nesse cenário?